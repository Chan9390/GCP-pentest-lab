locals {
    region = "us-east4"
    zone = "us-east4-a"
    images = fileset("${path.module}/flask-app/images", "*")
}

variable "gcp_project_id"{
    description = "GCP project where the lab should be set up. By god, don't do this on your company's environment."
    type = string
}


## SERVICE ACCOUNTS

# Exposed SA (inside bucket 2)
resource "google_service_account" "sync_sa" {
    account_id   = "${var.gcp_project_id}-sync-sa"
    display_name = "Dev/Prod sync SA"
}

resource "google_project_iam_member" "sync_sa_role" {
  project = var.gcp_project_id
  role    = "roles/viewer"
  member  = "serviceAccount:${google_service_account.sync_sa.email}"
}

resource "google_service_account_iam_member" "sync_sa_user" {
  service_account_id = google_service_account.vm_sa.name
  role               = "roles/iam.serviceAccountUser"
  member             = "serviceAccount:${google_service_account.sync_sa.email}"
}

# SA for VM
resource "google_service_account" "vm_sa" {
    account_id   = "${var.gcp_project_id}-flask-sa"
    display_name = "Flask VM Service Account"
}

resource "google_project_iam_member" "project" {
  project = var.gcp_project_id
  role    = "roles/editor"
  member  = "serviceAccount:${google_service_account.vm_sa.email}"
}



## COMPUTE ENGINE

# VM hosting Flask app
resource "google_compute_instance" "main_vm" {
    name = "${var.gcp_project_id}-flask-vm"
    zone = local.zone
    machine_type = "e2-medium"

    boot_disk {
        auto_delete = true
        initialize_params {
            image = "debian-12-bookworm-v20230724"
            size  = "10"
            type  = "pd-standard"
        }
    }

    network_interface {
        network = "default"
        access_config {}
    }

    service_account { 
        email = google_service_account.vm_sa.email
        scopes = ["https://www.googleapis.com/auth/cloud-platform"]
    }

    metadata_startup_script = "echo 'Hello, i'm the 5th flag!! Turns out some people like to do some insecure stuff with environment variables and startup scripts. Good think the metadata server is always here to help! :D'"

}


#Permission for SA into VM
resource "google_compute_instance_iam_member" "flask_member" {
  project = var.gcp_project_id
  instance_name = google_compute_instance.main_vm.name
  role = "roles/editor"
  member = "serviceAccount:${google_service_account.sync_sa.email}"
  zone = local.zone
}



## BUCKETS

# Bucket 1 - Prod stuff
module "prod_bucket" {
  source  = "terraform-google-modules/cloud-storage/google//modules/simple_bucket"
  version = "4.0.0"
  project_id  = var.gcp_project_id
  name = "${var.gcp_project_id}-prod-bucket"

  location = local.region
  force_destroy = true

  iam_members = [{
    role   = "roles/storage.legacyObjectReader"
    member = "allUsers"
  }]
}

# Bucket 2 - "Dev" stuff
module "dev_bucket" {
  source  = "terraform-google-modules/cloud-storage/google//modules/simple_bucket"
  version = "4.0.0"
  project_id  = var.gcp_project_id
  name = "${var.gcp_project_id}-dev-bucket"

  location = local.region
  force_destroy = true

  iam_members = [{
    role   = "roles/storage.objectViewer"
    member = "allUsers"
  }]
}

# Bucket 3 - Random stuff
module "mkt_bucket" {
  source  = "terraform-google-modules/cloud-storage/google//modules/simple_bucket"
  version = "4.0.0"
  project_id  = var.gcp_project_id
  name = "${var.gcp_project_id}-mkt-bucket"

  location = local.region
  force_destroy = true

  iam_members = [{
    role   = "roles/storage.legacyObjectReader"
    member = "allUsers"
  }]
}

# Bucket 4 - Secret-Bucket
module "secret_bucket" {
  depends_on = [
    google_service_account.sync_sa
  ]

  source  = "terraform-google-modules/cloud-storage/google//modules/simple_bucket"
  version = "4.0.0"
  project_id  = var.gcp_project_id
  name = "${var.gcp_project_id}-secret-bucket"

  location = local.region
  force_destroy = true
}


# Bucket 5 - Super-Secret-Bucket
module "super_secret_bucket" {
  depends_on = [
    google_service_account.vm_sa
  ]

  source  = "terraform-google-modules/cloud-storage/google//modules/simple_bucket"
  version = "4.0.0"
  project_id  = var.gcp_project_id
  name = "${var.gcp_project_id}-super-secret-bucket"

  location = local.region
  force_destroy = true
}


## BUCKET IMAGES

resource "google_storage_bucket_object" "dev_images" {
  for_each = toset(local.images)
  name   = each.key
  source = "${path.module}/flask-app/images/${each.key}"
  bucket = module.dev_bucket.name
}

resource "google_storage_bucket_object" "prod_images" {
  for_each = toset(local.images)
  name   = each.key
  source = "${path.module}/flask-app/images/${each.key}"
  bucket = module.prod_bucket.name
}

resource "google_storage_bucket_object" "mkt_images" {
  for_each = toset(local.images)
  name   = each.key
  source = "${path.module}/flask-app/images/${each.key}"
  bucket = module.mkt_bucket.name
}

## BUCKET FLAGS

#Flag 1 goes in the open bucket (bucket 2)
resource "google_storage_bucket_object" "flag1" {
  name   = "flag1.txt"
  source = "${path.module}/flags/flag1.txt"
  bucket = module.dev_bucket.name
}

#Flag 2 goes in the secret bucket (bucket 4)
resource "google_storage_bucket_object" "flag2" {
  name   = "flag2.txt"
  source = "${path.module}/flags/flag2.txt"
  bucket = module.secret_bucket.name
}

#Flag 6 goes in the super secret bucket (bucket 5)
resource "google_storage_bucket_object" "flag6" {
  name   = "flag6.txt"
  source = "${path.module}/flags/flag6.txt"
  bucket = module.super_secret_bucket.name
}



## BUCKET ROLES

#SA exposed on bucket can read the secret bucket
resource "google_storage_bucket_iam_member" "secret_bucket_role" {
  depends_on = [
    module.secret_bucket
  ]

  bucket = module.secret_bucket.name
  role = "roles/storage.objectViewer"
  member = "serviceAccount:${google_service_account.sync_sa.email}"
}

#VM's SA can read the super secret bucket
resource "google_storage_bucket_iam_member" "super_secret_bucket_role" {
  depends_on = [
    module.super_secret_bucket
  ]

  bucket = module.super_secret_bucket.name
  role = "roles/storage.objectViewer"
  member = "serviceAccount:${google_service_account.vm_sa.email}"
}

/* 

# DB
module "mysql_db"{
    source  = "GoogleCloudPlatform/sql-db/google//modules/mysql"
    version = "15.2.0"
    database_version = "MYSQL_8_0"
    name = "${var.gcp_project_id}-mysql-db"
    project_id = var.gcp_project_id
    root_password = "iliketrains"
    tier = "db-f1-micro"
    zone = local.zone
    region = local.region
    deletion_protection = false
}

# Flags inside DB
##TODO

 */



### OUTPUTS

output "vm_ip_addr" {
  value = "VM IP: ${google_compute_instance.main_vm.network_interface[0].access_config[0].nat_ip}"
}

resource "local_file" "vm_ip_addr_output" {
    content  = google_compute_instance.main_vm.network_interface[0].access_config[0].nat_ip
    filename = "${path.module}/temporary-outputs/vmIP.txt"
}

/* resource "local_file" "db_ip_addr_output" {
    content  = module.mysql_db.instance_first_ip_address
    filename = "${path.module}/temporary-outputs/dbIP.txt"
} */

resource "local_file" "bucket1_name" {
    content  = module.prod_bucket.name
    filename = "${path.module}/temporary-outputs/bucket1.txt"
}

resource "local_file" "bucket2_name" {
    content  = module.dev_bucket.name
    filename = "${path.module}/temporary-outputs/bucket2.txt"
}

resource "local_file" "bucket3_name" {
    content  = module.mkt_bucket.name
    filename = "${path.module}/temporary-outputs/bucket3.txt"
}

resource "local_file" "bucket4_name" {
    content  = module.secret_bucket.name
    filename = "${path.module}/temporary-outputs/bucket4.txt"
}

resource "local_file" "bucket5_name" {
    content  = module.super_secret_bucket.name
    filename = "${path.module}/temporary-outputs/bucket5.txt"
}

## FIREWALL

# Allow webserver (port 80) and SSH (22)
resource "google_compute_firewall" "default" {
  name    = "firewall-rule"
  network = "default"

  allow {
    protocol = "tcp"
    ports    = ["80", "22"]
  }

  source_ranges = ["0.0.0.0/0"]
}